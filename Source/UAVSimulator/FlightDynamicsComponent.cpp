#include "FlightDynamicsComponent.h"
#include "GameFramework/Actor.h"
#include "Components/PrimitiveComponent.h"
#include "DrawDebugHelpers.h"
#include "Kismet/GameplayStatics.h"
#include "Engine/Engine.h" // –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è GEngine
#include "Misc/OutputDevice.h"

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
UFlightDynamicsComponent::UFlightDynamicsComponent()
{
	PrimaryComponentTick.bCanEverTick = true;
}

// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å–∞–º–æ–º—É –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.
void UFlightDynamicsComponent::BeginPlay()
{
	Super::BeginPlay();

	UGameplayStatics::SetGlobalTimeDilation(GetWorld(), DebugSimulatorSpeed);
	Owner = GetOwner();
	if (Owner)
	{
		Root = Cast<UPrimitiveComponent>(Owner->GetRootComponent());

		if (InitialSpeed > 0) {
			const FVector ForwardDirection = Owner->GetActorForwardVector();
			const FVector InitialVelocity = ForwardDirection * (InitialSpeed * 100.0f);
			Root->SetPhysicsLinearVelocity(InitialVelocity);
		}
	}


	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è: %s"), *Root->GetComponentLocation().ToString());
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("–ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞: %s"), Root->IsGravityEnabled() ? TEXT("–¢–∞–∫") : TEXT("–ù—ñ"));
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("–ú–∞—Å–∞ –æ–±'—î–∫—Ç–∞: %.4f –∫–≥"), Root->GetMass());
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("–°–∏–º—É–ª—è—Ü—ñ—è —Ñ—ñ–∑–∏–∫–∏: %s"), Root->IsSimulatingPhysics() ? TEXT("–¢–∞–∫") : TEXT("–ù—ñ"));
}

// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–¥—Ä—É –≥—Ä–∏.
void UFlightDynamicsComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	if (WarmUpEngine && GetWorld()->GetTimeSeconds() < 0.2f)
	{
		return;
	}

	if (!Owner || !Root || !WingCurveCl || !WingCurveCd || !TailCurveCl || !TailCurveCd) {
		if (DebugConsoleLogs) UE_LOG(LogTemp, Error, TEXT("üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–¥—Ä: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–±–æ –∫—Ä–∏–≤–∞!"));
		if (GEngine) GEngine->AddOnScreenDebugMessage(0, 5.f, FColor::Red, TEXT("ERROR: FlightDynamicsComponent not configured!"));
		return;
	}

	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("######### –ù–û–í–ò–ô –¢–Ü–ö #########\r\n"));

	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FVector LinearVelocity = Root->GetPhysicsLinearVelocity();

	float SpeedInMetersPerSecond = GetSpeedInMetersPerSecond();
	LogMsg(TEXT("–®–≤–∏–¥–∫—ñ—Å—Ç—å: ") + FString::SanitizeFloat(SpeedInMetersPerSecond) + TEXT("–º/—Å"));
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("–®–≤–∏–¥–∫—ñ—Å—Ç—å %.4f –º/—Å."), SpeedInMetersPerSecond);

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), CenterOfMass, FRotator::ZeroRotator, 15.0f, FColor::Magenta, false, -1, 0);
	}

	// --- –†–û–ó–†–ê–•–£–ù–û–ö –°–ò–õ–ò –î–í–ò–ì–£–ù–ê ---
		// 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —Å–∏–ª–∏. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ –Ω–∞–ø—Ä—è–º–æ–∫ "–≤–ø–µ—Ä–µ–¥" –¥–ª—è –∞–∫—Ç–æ—Ä–∞.
	const FVector ForceDirection = Owner->GetActorForwardVector();

	// 2. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–µ–∫—Ç–æ—Ä —Å–∏–ª–∏, –º–Ω–æ–∂–∞—á–∏ –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–∞ –≤–µ–ª–∏—á–∏–Ω—É.
	const FVector EngineForce = ForceDirection * ThrustForce;

	// 3. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç–æ—á–∫—É –ø—Ä–∏–∫–ª–∞–¥–∞–Ω–Ω—è —Å–∏–ª–∏ –≤ —Å–≤—ñ—Ç–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö.
	// –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–µ –∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó –∞–∫—Ç–æ—Ä–∞
	// —ñ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ –¥–æ —Å–≤—ñ—Ç–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó —Ü–µ–Ω—Ç—Ä—É –º–∞—Å.
	const FVector WorldSpaceOffset = Owner->GetActorRotation().RotateVector(EngineForcePointOffset);
	const FVector EngineForcePoint = Root->GetCenterOfMass() + WorldSpaceOffset;

	// 4. –ü—Ä–∏–∫–ª–∞–¥–∞—î–º–æ —Å–∏–ª—É –¥–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ—ó —Ç–æ—á–∫–∏. –¶–ï –ö–õ–Æ–ß–û–í–ò–ô –ú–û–ú–ï–ù–¢.
	// AddForceAtLocation —Å—Ç–≤–æ—Ä–∏—Ç—å —è–∫ –ª—ñ–Ω—ñ–π–Ω–∏–π, —Ç–∞–∫ —ñ –æ–±–µ—Ä—Ç–æ–≤–∏–π —Ä—É—Ö.
	Root->AddForceAtLocation(EngineForce, EngineForcePoint);

	// 5. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≤–µ–∫—Ç–æ—Ä —Å–∏–ª–∏ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è.
	// –ú–∞–ª—é—î–º–æ —Å—Ç—Ä—ñ–ª–∫—É –≤—ñ–¥ —Ç–æ—á–∫–∏ –ø—Ä–∏–∫–ª–∞–¥–∞–Ω–Ω—è —Å–∏–ª–∏ –≤ –Ω–∞–ø—Ä—è–º–∫—É —Å–∏–ª–∏.
	const FVector ArrowEndPoint = EngineForcePoint + EngineForce;
	DrawDebugDirectionalArrow(GetWorld(), EngineForcePoint, ArrowEndPoint, 30.f, FColor::Red, false, 0.f, 0, 2.f);

	// --- –†–û–ó–†–ê–•–£–ù–û–ö –ê–ï–†–û–î–ò–ù–ê–ú–Ü–ß–ù–ò–• –°–ò–õ ---

	ApplyTailForceForSide(+1);
	LogMsg(TEXT("##### –ü–†–ê–í–ò–ô –•–í–Ü–°–¢ #####"));

	ApplyTailForceForSide(-1);
	LogMsg(TEXT("##### –õ–Ü–í–ò–ô –•–í–Ü–°–¢ #####"));

	ApplyWingForceForSide(+1);
	LogMsg(TEXT("##### –ü–†–ê–í–ï –ö–†–ò–õ–û #####"));

	ApplyWingForceForSide(-1);
	LogMsg(TEXT("##### –õ–Ü–í–ï –ö–†–ò–õ–û #####"));
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª –¥–ª—è –∫—Ä–∏–ª–∞.
void UFlightDynamicsComponent::ApplyWingForceForSide(int32 Side)
{
	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FQuat ComponentQuat = Root->GetComponentQuat();
	const FVector LocalOffset = FVector(WingForcePointOffset.X, Side * WingForcePointOffset.Y, WingForcePointOffset.Z);
	const FVector RotatedOffset = ComponentQuat.RotateVector(LocalOffset);
	const FVector ForcePoint = CenterOfMass + RotatedOffset;
	const FVector WingChordDirection = FindChordDirection(ForcePoint, WingLeadingEdgeOffset, WingTrailingEdgeOffset, Side);
	const FVector AirflowDirection = FindAirflowDirection(ForcePoint);

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), ForcePoint, FRotator::ZeroRotator, 10.0f, FColor::Red, false, -1, 0);
	}


	if (bDrawDebugMarkers && !AirflowDirection.IsNearlyZero())
	{
		DrawDebugDirectionalArrow(GetWorld(), ForcePoint, ForcePoint + AirflowDirection * 300.f, 15.f, FColor::Blue, false, 0.f, 0, 0.2f);
	}

	const float AoA = CalculateAoA(AirflowDirection, WingChordDirection);

	const float DragForceInNewtons = CalculateDragInNewtons(WingCurveCd, WingArea, AoA);
	const float LiftForceInNewtons = CalculateLiftInNewtons(WingCurveCl, WingArea, AoA);
	LogMsg(TEXT("Cd: ") + FString::SanitizeFloat(DragForceInNewtons) + TEXT(" –ù, Cl: ") + FString::SanitizeFloat(LiftForceInNewtons) + TEXT(" –ù."));

	// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–∏–ª—É –æ–ø–æ—Ä—É
	const float DragForceMagnitude = NewtonsToKiloCentimeter(DragForceInNewtons);
	const FVector DragForce = (AirflowDirection * DragForceMagnitude) * DragWingForseMultiplier;
	if (!DisableDragForse) Root->AddForceAtLocation(DragForce, ForcePoint);
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Wing drag: %s"), *DragForce.ToString());
	if (bDrawDebugMarkers && !DisableDragForse) DrawVectorAsArrow(GetWorld(), ForcePoint, DragForce, FColor::Purple, 10.0f);

	// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—ñ–¥–π–æ–º–Ω—É —Å–∏–ª—É
	const FVector LiftDirection = FindLiftDirection(ForcePoint, AirflowDirection);
	const float LiftForceMagnitude = NewtonsToKiloCentimeter(LiftForceInNewtons);
	const FVector LiftForce = (LiftDirection * LiftForceMagnitude) * LiftWingForseMultiplier;

	if (!DisableLiftForse) Root->AddForceAtLocation(LiftForce, ForcePoint);

	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Wing lift: %s"), *LiftForce.ToString());
	if (bDrawDebugMarkers && !DisableLiftForse) DrawVectorAsArrow(GetWorld(), ForcePoint, LiftForce, FColor::Green, 10.0f);
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª –¥–ª—è —Ö–≤–æ—Å—Ç–∞.
void UFlightDynamicsComponent::ApplyTailForceForSide(int32 Side)
{
	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FQuat ComponentQuat = Root->GetComponentQuat();
	const FVector LocalOffset = FVector(TailForcePointOffset.X, Side * TailForcePointOffset.Y, TailForcePointOffset.Z);
	const FVector RotatedOffset = ComponentQuat.RotateVector(LocalOffset);
	const FVector ForcePoint = CenterOfMass + RotatedOffset;
	const FVector TailChordDirection = FindChordDirection(ForcePoint, TailLeadingEdgeOffset, TailTrailingEdgeOffset, Side);
	const FVector AirflowDirection = FindAirflowDirection(ForcePoint);

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), ForcePoint, FRotator::ZeroRotator, 10.0f, FColor::Red, false, -1, 0);
	}

	if (bDrawDebugMarkers && !AirflowDirection.IsNearlyZero())
	{
		DrawDebugDirectionalArrow(GetWorld(), ForcePoint, ForcePoint + AirflowDirection * 300.f, 15.f, FColor::Blue, false, 0.f, 0, 0.2f);
	}
	
	const float AoA = CalculateAoA(AirflowDirection, TailChordDirection);

	const float DragForceInNewtons = CalculateDragInNewtons(TailCurveCd, TailArea, AoA);
	const float LiftForceInNewtons = CalculateLiftInNewtons(TailCurveCl, TailArea, AoA);
	LogMsg(TEXT("Cd: ") + FString::SanitizeFloat(DragForceInNewtons) + TEXT(" –ù, Cl: ") + FString::SanitizeFloat(LiftForceInNewtons) + TEXT(" –ù."));

	// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–∏–ª—É –æ–ø–æ—Ä—É
	const float DragForceMagnitude = NewtonsToKiloCentimeter(DragForceInNewtons);
	const FVector DragForce = (AirflowDirection * DragForceMagnitude) * DragTailForseMultiplier;
	if (!DisableDragForse) Root->AddForceAtLocation(DragForce, ForcePoint);
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Tail drag: %s"), *DragForce.ToString());
	if (bDrawDebugMarkers && !DisableDragForse) DrawVectorAsArrow(GetWorld(), ForcePoint, DragForce, FColor::Purple, 10.0f);

	// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—ñ–¥–π–æ–º–Ω—É —Å–∏–ª—É
	const FVector LiftDirection = FindLiftDirection(ForcePoint, AirflowDirection);
	const float LiftForceMagnitude = NewtonsToKiloCentimeter(LiftForceInNewtons);
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Tail LiftForceMagnitude: %.4f"), LiftForceMagnitude);

	const FVector LiftForce = (LiftDirection * LiftForceMagnitude) * LiftTailForseMultiplier;
	if (!DisableLiftForse) Root->AddForceAtLocation(LiftForce, ForcePoint);
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Tail lift: %s"), *LiftForce.ToString());
	if (bDrawDebugMarkers && !DisableLiftForse) DrawVectorAsArrow(GetWorld(), ForcePoint, LiftForce, FColor::Green, 10.0f);
}

float UFlightDynamicsComponent::NewtonsToKiloCentimeter(float Newtons) {
	return Newtons * 100;
}

float UFlightDynamicsComponent::CalculateLiftInNewtons(UCurveFloat* CurveCl, float Area, float AoA) {
	float Cl = CurveCl->GetFloatValue(AoA);
	const float AirSpeed = GetSpeedInMetersPerSecond();

	float result = Cl* ((AirDensity * (AirSpeed * AirSpeed)) / 2)* Area;
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Lf = %.4f –ù| œÅ: %.4f –º/—Å., v: %.4f, A: %.4f, Cl: %.4f [AoA: %.4f]"), result, AirDensity, AirSpeed, Area, Cl, AoA);
	return result;
}

float UFlightDynamicsComponent::CalculateDragInNewtons(UCurveFloat* CurveCd, float Area, float AoA) {
	float Cd = CurveCd->GetFloatValue(AoA);
	const float Speed = GetSpeedInMetersPerSecond();
	float result = 0.5f * AirDensity * (Speed * Speed) * Cd * Area;
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("Df = %.4f –ù| œÅ: %.4f –º/—Å., v: %.4f, A: %.4f, Cd : %.4f [AoA: %.4f]"), result, AirDensity, Speed, Area, Cd, AoA);
	return result;
}

float UFlightDynamicsComponent::GetSpeedInMetersPerSecond() {
	return GetOwner()->GetVelocity().Size() / 100.0f;
}

FVector UFlightDynamicsComponent::FindChordDirection(FVector ForcePoint, FVector LeadingEdgeOffset, FVector TrailingEdgeOffset, int32 Side) {
	/*const FTransform& ActorTransform = Owner->GetActorTransform();
	const FVector LeadingEdgeLocation = ActorTransform.TransformPosition(FVector(LeadingEdgeOffset.X + ForcePoint.X, (LeadingEdgeOffset.Y * Side) + ForcePoint.Y, LeadingEdgeOffset.Z + ForcePoint.Z));
	const FVector TrailingEdgeLocation = ActorTransform.TransformPosition(FVector(TrailingEdgeOffset.X + ForcePoint.X, (TrailingEdgeOffset.Y * Side) + ForcePoint.Y, TrailingEdgeOffset.Z + ForcePoint.Z));

	// –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–æ—Ä–¥–∏
	if (DebugConsoleLogs) DrawDebugLine(
		GetWorld(),
		LeadingEdgeLocation,
		TrailingEdgeLocation,
		FColor::Black,
		false, -1, 0, 0.5f
	);
	return (LeadingEdgeLocation - TrailingEdgeLocation).GetSafeNormal();*/
	const FTransform& ActorTransform = Owner->GetActorTransform();

	// 1. –°–ø–µ—Ä—à—É –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ—â–µ–Ω–Ω—è —É —Å–≤—ñ—Ç–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
	const FVector BaseLeadingEdgeWorld = ActorTransform.TransformPosition(
		FVector(LeadingEdgeOffset.X, LeadingEdgeOffset.Y * Side, LeadingEdgeOffset.Z)
	);
	const FVector BaseTrailingEdgeWorld = ActorTransform.TransformPosition(
		FVector(TrailingEdgeOffset.X, TrailingEdgeOffset.Y * Side, TrailingEdgeOffset.Z)
	);

	// 2. –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ —É —Å–≤—ñ—Ç–æ–≤–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ, –º–∏ –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ ForcePoint.
	//    –¶–µ —Å–ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ø–ö–©–û ForcePoint - —Ü–µ —Ç–µ–∂ –≤–µ–∫—Ç–æ—Ä —É —Å–≤—ñ—Ç–æ–≤–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ.
	const FVector LeadingEdgeLocation = BaseLeadingEdgeWorld + ForcePoint;
	const FVector TrailingEdgeLocation = BaseTrailingEdgeWorld + ForcePoint;

	// –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–æ—Ä–¥–∏
	if (DebugConsoleLogs) DrawDebugLine(
		GetWorld(),
		LeadingEdgeLocation,
		TrailingEdgeLocation,
		FColor::Black,
		false, -1, 0, 0.5f
	);
	return (LeadingEdgeLocation - TrailingEdgeLocation).GetSafeNormal();
}

FVector UFlightDynamicsComponent::FindAirflowDirection(FVector WorldOffset) {
	const FVector ActorVelocity = Owner->GetVelocity();

	if (ActorVelocity.IsNearlyZero())
	{
		return FVector();
	}
	return -ActorVelocity.GetSafeNormal();
}

FVector UFlightDynamicsComponent::FindLiftDirection(FVector WorldOffset, FVector AirflowDirection) {
	const FVector WingRightVector = Root->GetRightVector();
	FVector LiftDirection = FVector::CrossProduct(AirflowDirection, WingRightVector);
	LiftDirection.Normalize();
	if (LiftDirection.IsNearlyZero())
	{
		return FVector();
	}
	return LiftDirection;
	
}

float UFlightDynamicsComponent::CalculateAoA(FVector AirflowDirection, FVector WingChordDirection) {
	const FVector Velocity = Owner->GetVelocity();
	if (DebugConsoleLogs) UE_LOG(LogTemp, Warning, TEXT("AirflowDirection: %s, WingChordDirection: %s"), *AirflowDirection.ToString(), *WingChordDirection.ToString());

	if (!Velocity.IsNearlyZero())
	{
		const float DotProduct = FVector::DotProduct(WingChordDirection, AirflowDirection);
		return FMath::RadiansToDegrees(FMath::Acos(DotProduct));
	}
	return 0.0f;
}

void UFlightDynamicsComponent::LogMsg(FString Text) {
	if (GEngine && DebugUILogs) {
		GEngine->AddOnScreenDebugMessage(-1, 0.f, FColor::Black, Text);
	}
}

void UFlightDynamicsComponent::DrawVectorAsArrow(const UWorld* World, FVector StartLocation, FVector Direction, FColor Color, float Multiplier, float ArrowSize, float Duration, float Thickness)
{
	if (!World)
	{
		return;
	}
	FVector EndLocation = StartLocation + (Direction * Multiplier);

	DrawDebugDirectionalArrow(
		World,
		StartLocation,
		EndLocation,
		ArrowSize,
		Color,
		false,
		Duration,
		0,
		Thickness
	);
}