#include "FlightDynamicsComponent.h"
#include "GameFramework/Actor.h"
#include "Components/PrimitiveComponent.h"
#include "DrawDebugHelpers.h"
#include "Kismet/GameplayStatics.h"
#include "Engine/Engine.h" // –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è GEngine

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
UFlightDynamicsComponent::UFlightDynamicsComponent()
{
	PrimaryComponentTick.bCanEverTick = true;
}

// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Å–∞–º–æ–º—É –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏.
void UFlightDynamicsComponent::BeginPlay()
{
	Super::BeginPlay();

	UGameplayStatics::SetGlobalTimeDilation(GetWorld(), DebugSimulatorSpeed);
	Owner = GetOwner();
	if (Owner)
	{
		Root = Cast<UPrimitiveComponent>(Owner->GetRootComponent());
	}

	/*const float DesiredSpeed = 3612.0f;
	const FVector ForwardDirection = GetOwner()->GetActorForwardVector();
	const FVector InitialVelocity = ForwardDirection * DesiredSpeed;
	Root->SetPhysicsLinearVelocity(InitialVelocity);*/


	UE_LOG(LogTemp, Warning, TEXT("–ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è: %s"), *Root->GetComponentLocation().ToString());
	UE_LOG(LogTemp, Warning, TEXT("–ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞: %s"), Root->IsGravityEnabled() ? TEXT("–¢–∞–∫") : TEXT("–ù—ñ"));
	UE_LOG(LogTemp, Warning, TEXT("–ú–∞—Å–∞ –æ–±'—î–∫—Ç–∞: %.4f –∫–≥"), Root->GetMass());
	UE_LOG(LogTemp, Warning, TEXT("–°–∏–º—É–ª—è—Ü—ñ—è —Ñ—ñ–∑–∏–∫–∏: %s"), Root->IsSimulatingPhysics() ? TEXT("–¢–∞–∫") : TEXT("–ù—ñ"));
}

// –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–¥—Ä—É –≥—Ä–∏.
void UFlightDynamicsComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
	Super::TickComponent(DeltaTime, TickType, ThisTickFunction);

	if (WarmUpEngine && GetWorld()->GetTimeSeconds() < 0.2f)
	{
		return;
	}

	if (!Owner || !Root || !WingCurveCl || !WingCurveCd || !TailCurveCl || !TailCurveCd) {
		UE_LOG(LogTemp, Error, TEXT("üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–∞–¥—Ä: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–±–æ –∫—Ä–∏–≤–∞!"));
		if (GEngine) GEngine->AddOnScreenDebugMessage(0, 5.f, FColor::Red, TEXT("ERROR: FlightDynamicsComponent not configured!"));
		return;
	}

	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FVector LinearVelocity = Root->GetPhysicsLinearVelocity();

	float SpeedInMetersPerSecond = GetSpeedInMetersPerSecond();
	LogMsg(TEXT("–®–≤–∏–¥–∫—ñ—Å—Ç—å: ") + FString::SanitizeFloat(SpeedInMetersPerSecond) + TEXT("–º/—Å"));

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), CenterOfMass, FRotator::ZeroRotator, 15.0f, FColor::Magenta, false, -1, 0);
	}

	// --- –†–û–ó–†–ê–•–£–ù–û–ö –ê–ï–†–û–î–ò–ù–ê–ú–Ü–ß–ù–ò–• –°–ò–õ ---

	ApplyTailForceForSide(+1);
	LogMsg(TEXT("##### –ü–†–ê–í–ò–ô –•–í–Ü–°–¢ #####"));

	ApplyTailForceForSide(-1);
	LogMsg(TEXT("##### –õ–Ü–í–ò–ô –•–í–Ü–°–¢ #####"));

	ApplyWingForceForSide(+1);
	LogMsg(TEXT("##### –ü–†–ê–í–ï –ö–†–ò–õ–û #####"));

	ApplyWingForceForSide(-1);
	LogMsg(TEXT("##### –õ–Ü–í–ï –ö–†–ò–õ–û #####"));


	


	if (DebugIsLocalForce) {
		const FVector Forward = Root->GetForwardVector(); // –õ–æ–∫–∞–ª—å–Ω–∏–π +X —É —Å–≤—ñ—Ç—ñ
		const FVector Right = Root->GetRightVector();
		const FVector Up = Root->GetUpVector();
		const FVector Force = (Forward * DebugForce.X) + (Right * DebugForce.Y) + (Up * DebugForce.Z);
		Root->AddForce(Force);
	}
	else {
		Root->AddForce(DebugForce);
	}

}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª –¥–ª—è –∫—Ä–∏–ª–∞.
void UFlightDynamicsComponent::ApplyWingForceForSide(int32 Side)
{
	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FQuat ComponentQuat = Root->GetComponentQuat();
	const FVector LocalOffset = FVector(WingForcePointOffset.X, Side * WingForcePointOffset.Y, WingForcePointOffset.Z);
	const FVector RotatedOffset = ComponentQuat.RotateVector(LocalOffset);
	const FVector ForcePoint = CenterOfMass + RotatedOffset;

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), ForcePoint, FRotator::ZeroRotator, 10.0f, FColor::Red, false, -1, 0);
	}
	const FRotator WingChordConfiguration = GetWingChordConfiguration(Side);
	const FVector WingChordDirection = FindChordDirection(ForcePoint, WingChordConfiguration, DebugDrawWingsInfo);
	const FVector AirflowDirection = FindAirflowDirection(ForcePoint, DebugDrawWingsInfo);
	const FVector LiftDirection = FindLiftDirection(ForcePoint, AirflowDirection, DebugDrawWingsInfo);
	//const float AoA = CalculateAoA(AirflowDirection, WingChordDirection);
	const float AoA = CalculateAoASimple(AirflowDirection, WingChordDirection);

	const float DragForceInNewtons = CalculateDragInNewtons(WingCurveCd, WingArea, AoA);
	const float LiftForceInNewtons = CalculateLiftInNewtons(WingCurveCl, WingArea, AoA);
	LogMsg(TEXT("Cd: ") + FString::SanitizeFloat(DragForceInNewtons) + TEXT(" –ù, Cl: ") + FString::SanitizeFloat(LiftForceInNewtons) + TEXT(" –ù."));

	// --- –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–±–æ—Ö —Å–∏–ª ---
	if (!DebugDisableWings && !DebugDisableDragForceWings) {
		// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–∏–ª—É –æ–ø–æ—Ä—É
		const float DragForceMagnitude = NewtonsToKiloCentimeter(DragForceInNewtons);
		const FVector DragForce = AirflowDirection * DragForceMagnitude;
		Root->AddForceAtLocation(DragForce, ForcePoint);
	}
	if (!DebugDisableWings && !DebugDisableLiftForceWings) {
		// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—ñ–¥–π–æ–º–Ω—É —Å–∏–ª—É
		const float LiftForceMagnitude = NewtonsToKiloCentimeter(LiftForceInNewtons);
		const FVector LiftForce = LiftDirection * LiftForceMagnitude;
		Root->AddForceAtLocation(LiftForce, ForcePoint);
	}
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∏–ª –¥–ª—è —Ö–≤–æ—Å—Ç–∞.
void UFlightDynamicsComponent::ApplyTailForceForSide(int32 Side)
{
	const FVector CenterOfMass = Root->GetCenterOfMass();
	const FQuat ComponentQuat = Root->GetComponentQuat();
	const FVector LocalOffset = FVector(TailForcePointOffset.X, Side * TailForcePointOffset.Y, TailForcePointOffset.Z);
	const FVector RotatedOffset = ComponentQuat.RotateVector(LocalOffset);
	const FVector ForcePoint = CenterOfMass + RotatedOffset;

	if (bDrawDebugMarkers)
	{
		DrawDebugCrosshairs(GetWorld(), ForcePoint, FRotator::ZeroRotator, 10.0f, FColor::Red, false, -1, 0);
	}
	const FRotator TailChordConfiguration = GetTailChordConfiguration(Side);
	const FVector TailChordDirection = FindChordDirection(ForcePoint, TailChordConfiguration, DebugDrawTailInfo);
	const FVector AirflowDirection = FindAirflowDirection(ForcePoint, DebugDrawTailInfo);
	const FVector LiftDirection = FindLiftDirection(ForcePoint, AirflowDirection, DebugDrawTailInfo);
	//const float AoA = CalculateAoA(AirflowDirection, TailChordDirection);
	const float AoA = CalculateAoASimple(AirflowDirection, TailChordDirection);

	const float DragForceInNewtons = CalculateDragInNewtons(TailCurveCd, TailArea, AoA);
	const float LiftForceInNewtons = CalculateLiftInNewtons(TailCurveCl, TailArea, AoA);
	LogMsg(TEXT("Cd: ") + FString::SanitizeFloat(DragForceInNewtons) + TEXT(" –ù, Cl: ") + FString::SanitizeFloat(LiftForceInNewtons) + TEXT(" –ù."));


	// --- –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –æ–±–æ—Ö —Å–∏–ª ---
	if (!DebugDisableTail && !DebugDisableDragForceTail) {
		// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–∏–ª—É –æ–ø–æ—Ä—É
		const float DragForceMagnitude = NewtonsToKiloCentimeter(DragForceInNewtons);
		const FVector DragForce = AirflowDirection * DragForceMagnitude;
		Root->AddForceAtLocation(DragForce, ForcePoint);
	}
	if (!DebugDisableTail && !DebugDisableLiftForceTail) {
		// –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—ñ–¥–π–æ–º–Ω—É —Å–∏–ª—É
		const float LiftForceMagnitude = NewtonsToKiloCentimeter(LiftForceInNewtons);
		const FVector LiftForce = LiftDirection * LiftForceMagnitude;
		Root->AddForceAtLocation(LiftForce, ForcePoint);
	}
}

float UFlightDynamicsComponent::NewtonsToKiloCentimeter(float Newtons) {
	return Newtons * 100;
}

float UFlightDynamicsComponent::CalculateLiftInNewtons(UCurveFloat* CurveCl, float Area, float AoA) {
	float Cl = CurveCl->GetFloatValue(AoA);
	const float AirSpeed = GetSpeedInMetersPerSecond();

	float result = Cl* ((AirDensity * (AirSpeed * AirSpeed)) / 2)* Area;
	UE_LOG(LogTemp, Warning, TEXT("Lf = %.4f –ù| œÅ: %.4f –º/—Å., v: %.4f, A: %.4f, Cl: %.4f [AoA: %.4f]"), result, AirDensity, AirSpeed, Area, Cl, AoA);
	return result;
}

float UFlightDynamicsComponent::CalculateDragInNewtons(UCurveFloat* CurveCd, float Area, float AoA) {
	float Cd = CurveCd->GetFloatValue(AoA);
	const float Speed = GetSpeedInMetersPerSecond();
	float result = 0.5f * AirDensity * (Speed * Speed) * Cd * Area;
	UE_LOG(LogTemp, Warning, TEXT("Df = %.4f –ù| œÅ: %.4f –º/—Å., v: %.4f, A: %.4f, Cd : %.4f [AoA: %.4f]"), result, AirDensity, Speed, Area, Cd, AoA);
	return result;
}

float UFlightDynamicsComponent::GetSpeedInMetersPerSecond() {
	return GetOwner()->GetVelocity().Size() / 100.0f;
}

FVector UFlightDynamicsComponent::FindChordDirection(FVector WorldOffset, FRotator TiltRotator, bool Draw) {
	const float LineLength = 20.0f;
	const FColor Color = FColor::Red;
	const FVector LocalTiltedDirection = TiltRotator.RotateVector(FVector::ForwardVector);
	const FVector Direction = Owner->GetActorTransform().GetRotation().RotateVector(LocalTiltedDirection).GetSafeNormal();;
	
	if (Draw) {
		const FVector Start = WorldOffset - Direction * (LineLength / 2.0f);
		const FVector End = WorldOffset + Direction * (LineLength / 2.0f);
		DrawDebugLine(GetWorld(), Start, End, Color, false, -1.0f, 0, 1.0f);
	}
	return Direction;
}

FRotator UFlightDynamicsComponent::GetWingChordConfiguration(int32 Side) {
	return FRotator(WingChordYAngle, WingChordZAngle * Side, 0.0f);
}

FRotator UFlightDynamicsComponent::GetTailChordConfiguration(int32 Side) {
	return FRotator(TailChordYAngle, TailChordZAngle * Side, 0.0f);
}

FVector UFlightDynamicsComponent::FindAirflowDirection(FVector WorldOffset, bool Draw) {
	const FVector ActorVelocity = Owner->GetVelocity();

	if (!ActorVelocity.IsNearlyZero())
	{
		const FVector AirflowDirection = -ActorVelocity.GetSafeNormal();

		if (Draw) {
			const float StartDistance = 15.0f;
			const float LineLength = 50.0f;

			const FVector StartPoint = WorldOffset;
			const FVector EndPoint = StartPoint + AirflowDirection * LineLength;

			DrawDebugLine(GetWorld(), StartPoint, EndPoint, FColor::Cyan, false, -1.0f, 0, 1.0f);
		}

		return AirflowDirection;
	}
	return FVector();
}

FVector UFlightDynamicsComponent::FindLiftDirection(FVector WorldOffset, FVector AirflowDirection, bool Draw) {
	const FVector WingRightVector = Root->GetRightVector();
	FVector LiftDirection = FVector::CrossProduct(AirflowDirection, WingRightVector);
	LiftDirection.Normalize();
	if (!LiftDirection.IsNearlyZero())
	{
		if (Draw) {
			const FVector StartPoint = WorldOffset;
			const FVector EndPoint = StartPoint + LiftDirection * 50;

			DrawDebugLine(GetWorld(), StartPoint, EndPoint, FColor::Blue, false, -1.0f, 0, 1.0f);
		}
		return LiftDirection;
	}
	return FVector();
}

float UFlightDynamicsComponent::CalculateAoASimple(FVector AirflowDirection, FVector WingChordDirection) {
	FVector ActorForwardVector = GetOwner()->GetActorForwardVector();

	// 2. –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ —Å–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ (Dot Product)
	// –û–±–∏–¥–≤–∞ –≤–µ–∫—Ç–æ—Ä–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
	float DotProduct = FVector::DotProduct(ActorForwardVector, -AirflowDirection);

	// 3. –†–æ–∑—Ä–∞—Ö—É–π—Ç–µ –∫—É—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞—Ä–∫–∫–æ—Å–∏–Ω—É—Å–∞
	// FMath::Acos –¥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–∞–¥—ñ–∞–Ω–∞—Ö, —Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –≥—Ä–∞–¥—É—Å–∏
	float AngleOfAttackRadians = FMath::Acos(DotProduct);
	float AoA = FMath::RadiansToDegrees(AngleOfAttackRadians);

	UE_LOG(LogTemp, Warning, TEXT("Airflow: %s, Up: %s, AoA: %.4f"), *AirflowDirection.ToString(), *Root->GetUpVector().ToString(), AoA);
	return AoA;
}

float UFlightDynamicsComponent::CalculateAoA(FVector AirflowDirection, FVector WingChordDirection) {
	const float AngleDotProduct = FVector::DotProduct(-AirflowDirection, WingChordDirection);
	const float AngleRadians = FMath::Acos(FMath::Clamp(AngleDotProduct, -1.0f, 1.0f));
	float AoA = FMath::RadiansToDegrees(AngleRadians);

	const float SignDotProduct = FVector::DotProduct(AirflowDirection, Root->GetUpVector());

	AoA *= -FMath::Sign(SignDotProduct);

	UE_LOG(LogTemp, Warning, TEXT("Airflow: %s, Chord: %s, Up: %s, AoA: %.4f"), *AirflowDirection.ToString(), *WingChordDirection.ToString(), *Root->GetUpVector().ToString(), AoA);
	return AoA;
}

void UFlightDynamicsComponent::LogMsg(FString Text) {
	if (GEngine && bDrawDebugMarkers) {
		GEngine->AddOnScreenDebugMessage(-1, 0.f, FColor::Black, Text);
	}
}
